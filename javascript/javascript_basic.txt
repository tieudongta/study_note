JavaScript Use Cases
- Website Interactivity
- Form Validation
- Client-Side Data Manipulation
- API integration //Js can fetch data from external sources (APIs) and display it on web pages without needing to reload.
- Game Development
- Server-Side Development (Node.js)

Variable Declaration
- Keyword: let vs const //let can change value later. const cannot
- Variable Name: camel case naming convention

Data Types
- Numbers (numeric data type)
- Strings (text data type)
- Booleans (True/False data type)
- Null and Undefined //used to signify that a variable or value doesn't exist. when a variable is declared but hasn't been assigned a value, it is automatically set to undefined.
- Arrays (Complex data type) //collections of values stored inside square brackets []
- Objects (Complex data type) //consist of key-value pairs, enclosed in curly braces {}
* Primitive data type vs Complex Data Types

Variable Reassignment
- changing the value stored in a variable after it has been initially assigned.
- able to change not only value but also data type.

Variables and Data Type Flash cards
- What is the variable name used for? The variable is the label used to refer to the data stored.
- What is the camel case naming convention in JavaScript? It is a convention where the first word is lower cased and the first letter in the next word is capitalized. When the two words are combined, the capitalized letter resembles a hump in a camel's back.
- What keywords are used to declare variables in JavaScript? 
	Variables are declared using the keywords let or const.
- What are data types in JavaScript and how does variable reassignment allow for flexibility in programming?
	Data types in JavaScript include primitive and complex types, which can hold different kinds of information. Variable reassignment allows you to change the value inside a variable to adapt to changing program needs. JavaScript's flexibility in variable reassignment makes it like a shpe-shifting container that can hold treasures of all kinds.
- Can you declare and assign a value to a variable in a single line? Declaring and assigning a value to a variable can be done in a single line.
- What does declaring a variable mean in programming?
	Decaring a variable means reserving a special spot in your program's memory to store data that you can use later.
- What naming convention is often used when labeling variables and functions?
	The camel case naming convention is often used when labeling variables and functions.
- What is the difference between 'let' and 'const' when declaring a variable in JavaScript?
	'let' is used to declare a variable that can be changed later in the code, while 'const' is used to declare a variable that cannot be changed.
- What are JavaScript variables used for?
	JavaScript variables are containers used to store data.
- What is assigning a value to a variable like?
	Assigning a value to a variable is like putting something inside a labeled container.
- What are some data types that variables can hold in JavaScript?
	Variables can hold different data types such as numbers, strings, booleans, null, undefined, and arrays.
- What is the difference between primitive and complex data types in JavaScript?
	Primitive data types are the basic building blocks of data, representing a single, indivisible value such as numbers, strings, booleans, null and undefined. Complex data types are made up of multiple values and can hold more complex structures like arrays and objects.

Arithmetic Operators
- Addition Operator
- Subtraction Operator
- Multiplication Operator
- Exponentiation (**)
- Division Operator
- Remainder Operator
- Increment Operator
- Decrement Operator
- Order of Operation: PEMDAS (Parenthese, Exponentiation, Multilication/Divsion, Addition/Substraction)
- Type Coercion: convert one type of data into another type, so that it can work with different types of data together.
Arithmetric Operators Flash cards
- What are arithmetic opertors and why are they important in programming?
	Arithmetic operators are essential tools for performing calculations with numbers stored in variables in programming. The addition operator lets you add numbers together, while the subtraction operator helps you take away one number from another. The multiplication operator lets you create bigger numbers by repeating a number a certain number of times, and the exponentiation operator is like using a number to 'power up' another nuber. The division ooerator helps you split a number into smaller groups of find out how many times one number fits into another. These operators are like the building blocks for making your programs do math and solve problems.
- What is order of operations?
	Order of operations is a set of rules for solving math problems step by step
- What does the decrement operator do?
	The decrement oerator subtracts 1 from a number.
- What is type coercion?
	Type coercion converts one type of data into another type so that they can work together.
- What does the remainder opertator do?
	The remainder operator finds the leftover when dividing two numbers.
- What does the increment operator do?
	The increment operator adds 1 to a number.

Assignment Operators
- Longhand Version vs Shorthand version

Control Flow and Logic
- Control Flow: the order in which statements or instructions in a program are executed.
- Sequential Execution: line by line, from top to bottom.
- Conditional Execution: conditional statements like if, else if, else allow code to make decisions
- Looping: Looping constructs like for and while enable code to repeat a set of instructions multiple times until a certain condition is met.
- Function calls: jumps to the called function's code, executes it, and then returns to where it left off in the calling code.
- Logic: decision-making process some key aspects are boolean values, conditional statements, logical Opertors (&&, ||, !), and Comparison Operators (<, >, ==, !=)
Control Flow and Logic Flash Cards
- What is Logic in programming?
	Logic in programming involves making decisions and performing actions based on conditions and boolean values.
- What are function calls related to?
	Function calls are related to asking someone to perform a specific task to assist you.
- What does the journey through the mystical forest represent?
	The journey through the mystical forest is an analogy for control flow and logic in programming.
- What do conditional statements in programming mirror?
	Conditional statements in programming are mirrored by the decision to go left or right at a crossroads.
- What does looping represent?
	Looping is represented by crossing a magical bridge multiple times until a pecific condition is met.
- What does the sequential execution of code represent?
	The sequential execution of code is represented by each step taken in the forest.
- What is Control flow?
	Control flow is the order in which statements or instructions in a program are executed, and it's often controlled by conditional statements, loops, and function calls.
- What are Control flow and logic in programming?
	Control flow and logic are fundamental concepts in programming that dictate how a program executes instructions and makes decisions.
- What are the key aspects of Logic in programming?
	Boolean values, conditional statements, logical operators, and comparison opertors are key aspects of logic in programming.
- What do enchanted stones represent?
	Boolean values influence decisions, represented by enchated stones that either glow or remain dark.


Sequential Execution
- Can variables be assigned new values multiple times as a program progresses?
	Yes, variables can be assigned new values multiple times as the program progresses, keeping a running total of a value.
- What helps determine the new value of a variable when it is updated?
	Each time a variable is updated with a new value, the previous value helps determine the new one.
- In the context of sequential execution, what does 'No Skipping' mean?
	In sequential execution, you don't skip or jump over lines of code unless you encounter specific control flow structures.
- What does sequential execution in programming refer to?
	Sequential execution in programming refers to the order in which statements or instructions are executed, one after the other, from top to bottom.
- What does sequential execution follow in a program?
	Sequential execution follows the logical flow of your program, ensuring that instructions are carried out in the correct order tto achieve the desired outcome.
- What can alter the sequential flow of code?
	Control flow structures like loops or conditional statements can alter the sequential flow by allowing you to repeat code or make decisions.
- What is the purpose of sequential execution in programming?
	To give the computer a series of commands that it follows one after the other.
- What is sequential execution in programming?
	The order in which statements or instructions are executed one after the other from top to bottom.
- What does sequential execution make the output of a program?
	Sequential execution makes the output of your program predictable and easier to understad.
- How would you apply the concept of sequentaial execution in a program that calculates the toatal socre of a player in a game?
	By assigning the variable playerScore new values multiple times as the game progresses, using the previous value to determine the new one.
- Is sequential execution a fundamental concept in programming?
	Yes, sequential execution is a fundamental concept in programming.
- What does sequential execution in programming allow you to do?
	It allows you to give your computer a series of commands that it follows one after the other.
- What does sequential execution in programming refer to?
	Sequential execution in programming refers to the order in which statements or insturctions are executed, one afer the other, from top to bottom.
- What is the role of sequential execution in ensuring the output of a program?
	It ensures that instructions are carried out in the correct order to achieve the desired outcome.
- In what order is code executed by default?
	Code is executed in the order it appears in your program, starting from the first line and moving sequentially to the next.
- Why is sequential execution important in programming?
	Sequential execution is important for making programs do what you want.
- What is the purpose of sequential execution in programming?
	To ensure that instructions are carried out in the correct order to achieve the desired outcome.
- How can exercise help improve understanding of sequential execution
	Exercise can help improve understanding of sequential execution.

Basic functions
- Built-in functions vs User-defined Functions
- Keyword: function
- Function Name
- Parameters
- Function Body
- Function call

* console.log(var1,var2);

Nested Functions 
- functions defined inside another function.
Flashcard
-What is the function call in a user-defined function?
	The function call is when you actually use the function by providing a value for the parameter.
- Why are nested functions useful?
	This makes them useful for breaking down complex tasks into smaller pieces.
- What are the components of a user-defined function?
	They consist of a function keyword, a function name, parameters, and a function body.
- What are nested functions?
	Nested functions are functions defined inside another function.
- Can functions be used multile times?
	Functions can be created once and used many times.
- What is a parameter in a user-defined function?
	A placeholder for a value that will be provided when the function is used.
- What are user-defined functions like in JavaScript?
	User-defined functions are like custome recipes for JavaScript.
- What can nested functions access?
	They can access variables from their containing function.
- What are some examples of built-in functions in JavaScript?
	JavaScript provides pre-made functions for various tasks, similar to pre-made toys or gadgets. Examples of built-in functions include console.log(), alert(), Math.random(), Array.isArray(), and parseInt();
- What can nested functions do with variables passed to their containing function?
	Nestd functions can access and use variables passed to their containing function.

Conditional Execution
- Conditional checking
= Branching
= Control flow
- If Else Statement
- Switch Statement
- What is the purpose of the if statement?
	The if statement checks a condition and executes a block of code if it's true. It's like a gatekeeper that allows or denies access.
- What does the 'default' case do in a switch statement?
	if none of the case statements match the expression, the default case acts like a catch- all option
- What is the purpose of if...else statement in programming?
	To allow the program to make choices and take different actions based on certain conditions
- What is the role of if..else and switch statements in conditional execution?
	They control the flow of your program by determining which code blocks should be executed and which should be skipped.
- What is the role of the 'break' statement in a switch statement?
	It tells the program to stop checking and move on to the next part of the code
- What are conditional statements and how do they hel in programming?
	Conditional statements in programming allow your code to make decisions and respond intelligently to various situations. They are a fundamental part of programming and can be used to create decision trees. Switch statements are a neat way to handle multiple possibilities and make your code more organized and readable. They allow your program to choose the right action based on a specific condition or value. Switch stetements re like a menu with multiple choices that help your program make decisions.
- What are the components of an if statement?
	The if statement starts with the keyword 'if', followed by a condtion in parenthesees, and a block of code in curly braces that runs if the condition is true.
- What is the function of the the 'default' case in a switch statement?
	If none of the case statements match the expression, the default case acts like a catch-all option.
- What is conditional execution in programming and how is control flow implemented through conditional statements?
	Conditional execution in programming allows code to behave differently based on specific conditions, using logical expressions or comparison operators. Control flow is implemented through conditional statements like if, else if, else and swtch statements. These statements determine which code blocks should be executed and which should be skipped.
- What is the default case in a switch statement?
	A catch-all option if none of the case statemetns match the expression

Comparison Operators
- equality ==
- strict equality ===
- inequality !=
- less than <
- less than or equal <=
- greater than >
- greater than or equal >=
*if short hand (conditional expression)?output1:output2 (output2 may be another shorthand for else if case)
-What are comparison operators like?
	Comparison operators are like tools that help code make decisions based on conditions.
- What does the strict equality opertor check?
	The strict equality operator checks if two values match and have the same data type.
- What does the equality operator check?
	The equality operator checks if two values match without considering their data types.
- What do the comparison operators in programming help with?
	The text explains the usage of comparison operators in programming, such as the ineqquality, less than, less than or equalm greater than, and greater than or equal operators. These operators help make decisions based on whether one value is smaller, larger, or equal to another value. The text provides examples of each operator in an if statement and how they can be used to determine a user's age. The exercises provided help reinforce the knowledge of these opertors.
- What is the difference between the strict equality opertator and the regular equality operator in programming?
	The strict equality operator checks if two values are equal and ensures that they are of the same data type, while the regular equality oeprtor only checks if the values are equal.
- What do JavaScript comparison operators help with?
	JavaScript comparison operators help make decisions based on true or false conditions.
- What does using the correct comparison operator ensure?
	Using the correct comparison operator ensures precise comparisons and accurate decision-making.
- what does the inequality operator check?
	The inequality operator checks if two values or expressions are not equal to each other, including date type.

Logical operators
- AND (&&)
- OR (||)
- NOT (!)
* usable !! double negative
-typeof operator
- how can using typeof ensure the correct data type is being used?
	Using typeof can ensure that the correct data type is being used for specific operations or validations in code.
- What does the AND operator return?
	AND  returns ture only if all conditions are true.
- What does the NOT operator do?
	NOT negates a condition.
- Where are logical operators commonly used?
	lOGICAL OPERATORS ARE COMMONLY USED IN CONDITIONAL STATEMENTS TO CREATE MORE COMPLEX CONDITIONS.
- What do logical operators in programming do?
	Logical operators in programming combine and manipulate conditions to make complex decision with boolean values.
- How can understanding logical operators and datat type help in programming?
	Understanding logical operators and data types can help create more flexible and robust programs in JavaScript.
- What is an example of using typeof?
	An example of using typeof is checking the data type of variables like userName and userAge.
- What are some common data types that typeof can return?
	Common data types that typeof can return include string, number, boolean, undefined, object, array, and function.
- What does the OR operator return?
	OR returns true if at least one condition is true.
- What does the typeof opertator in JavaScript do?
	The typeof operator in JavaScript determines the data type of a value or expression.
- What are the three primary logical operators in JavaScript?
	The three primary logical operators in JavaScript are AND, OR, and NOT.
- What is the purpose of logical operators in programming?
	To combine and manipulate conditions to make more complex decisions in code.
- What does the typeof operator return when used on an undefined value?
	it returns 'undefined'

Loops and Jump Statements
- For Loop: know in advance how many times to repeat
- While Loop: don't know how many times but have a condition that must be met.
- Do-While Loop: similar to While Loop but ensures the code block to be executed at least once
- For-In Loop (Object Iteration): used to iterate over the properties of an object.
- For-Of Loop (Array and Iterable Iteration): used to iterate over the elements of an array or any iterable object.
- Continue Statement: used to skip the current iteration of a loop and move on to the next iteration.
- Break Statement: used to exit a loop prematurely.
- 

Arrays
- Array literal notation. way to define an array directly in code.
- Array constructor: another way to create arrays. using keyword new follow by Array() useful when creating arrays dynamiclally or with a predefined length.
- Accessing Array Elements
- Modify Array or also add new element with value
- Array length
- Push()// add one or more elements to the end and Pop() //remove the last elements from an array
- Join("") // convert the elements of an array into a single string join(seperator) in which seperator is a string and optional.
- For...Of Loop: used to iterate over the values of an iterable object, such as an array, string, or other iterable data structures.
- What are arrays in JavaScript and how are they indexed?
	Arrays in JavaScript are 0-based indexed data structures used to store multiple values. Bracket notation is used to access and modify array elements. The .length property returns the number of elements in an array. The for...of loop is a concise way to iterate over the values of an iterable object like an array.
- What are arrays and how can they be created in JavaScript?
	Arrays are containers that can hold different types of data and are fundamental in coding. They can be created using array literal notation or array constructors. Accessing array elements is done using breacket notation with a 0-based index.

Objects
- Properties and methods
- Object literal notation
- Object constructor: using new Object() 
- Using Dot Notation or Bracket Notation to assign value to object properties. providing flexibility when creating an object dynamically or in more complex scenarios.
- Property Accessor (Dot Notation)
- Properties Accessor (Breacket Notation)
	Using string literal
	Using a variable
	In case of Special Character and space
- Modifying Ojbects
	Using Dot Notation
	Using Bracket Notation
- Delete Operator
- Object Methods
	Defining Object Methos
	Calling Object Methods
	Accessing Object Properties
	Benefits of Object Methods: Encapsulation, Modularity, Context Awareness, 
- For...In Loop
	
** Different between let and var Scope, Hoisting, Redeclaraition, Global Object

JS Libraries and Frameworks
- Libraries: a collection of pre-written JavaScript code (jQuery, Lodash, Axios)
- frameworks: tool that provides a structured foundation for building web app. enforce a specific architecture, offer a set of tools, patterns, and best practices.
- Framewors ex: React, Angular, Vue.js

Debguing
- console.log();
- debugger Statement //puse the program at the debugger point;
- browser Developer tools: shortcut F12 or Ctrl+Shift+I
- inspecting Error Messages
- Code Reviews


